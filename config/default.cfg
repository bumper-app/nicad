# Generic NiCad3 default configuration parameters
# J.R. Cordy, Queen's University, May 2010 (revised March 2013)
#
# You can make as many of these NiCad3 config files as you wish,
# and force NiCad3 to use any particular one using a symbolic link
#
# Example:  cp default.config mynicadparameters.config
#               (edit mynicadparameters.config)
#           ln -s mynicadparameters.config nicad.config
#
# This default configuration specifies near-miss exact (type 3-1)
# clones with a maximum line difference of 30% and clone clustering
# into clone classes


# ***** DO NOT CHANGE THIS ORIGINAL DEFAULTS FILE!! *****


# Maximum difference threshold we are interested in (0.n)
# Example: 	threshold=0.3

threshold=0.3

# Sizes of clones we are interested in, in pretty-printed lines
# Example:	minsize=10
#		maxsize=2500

minsize=10
maxsize=2500

# Custom pre-transformation to be applied to potential clones (none, transformname)
# Where "transformname" is the name of a pre-transformation TXL program txl/transformname.txl in the txl/
# subdirectory to be applied to all potential clones
# Example: 	normalize=xmlsortblocks
# means apply the normalizing transformation "txl/xmlsortblocks.txl" to 
# each potential clone before renaming

transform=none

# Kind of renaming to be applied (none, blind, consistent)
# Blind renaming changes every identifier to "X"
# Consistent renaming consistently renames identifiers to "Xn", where n is a number
# Example:	rename=consistent

rename=none

# Kind of filtering to be applied (none, nonterminal ...)
# Where each "nonterminal" is the name of a nonterminal in the language grammar
# Example: 	filter="declaration assign_statement" 
# means filter out [declaration]s and [assign_statement]s from potential clones

filter=none

# Kind of abstraction to be applied (none, nonterminal ...)
# Where each "nonterminal" is the name of a nonterminal in the language grammar
# Example: 	abstract=expression
# means abstract all [expression]s to the identifier "expression" in potential clones
# Abstraction nonterminals presently supported for C, C#, Java, Python: 
#    block - all blocks, including function bodies
#    declaration - all data declarations
#    statement - all statements
#    expression - all expressions
#    condition - all if/while conditions
#    literal - all literal constant values

abstract=none

# Custom contextual normalizer to be applied to potential clones (none, normname)
# Where "normname" is the name of a normalizing TXL program txl/normname.txl in the txl/
# subdirectory to be applied to all potential clones
# Example: 	normalize=cabstractifconditions 
# means apply the normalizing transformation "txl/cabstractifconditions.txl" to 
# each potential clone

normalize=none

# Cluster clone pairs into classes
# Example:	cluster=yes

cluster=yes

# Make XML and HTML source reports
# Example:	report=yes

report=no

# End of NiCad configuration parameters
